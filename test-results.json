{
  "timestamp": "2025-07-19T00:44:40.907Z",
  "summary": {
    "total": 6,
    "passed": 0,
    "failed": 6,
    "skipped": 0,
    "passRate": 0,
    "totalTime": 20697
  },
  "results": {
    "passed": [],
    "failed": [
      {
        "name": "Unit Tests - PDF Text Extraction",
        "duration": 2375,
        "error": "Command failed: npm run test -- --testPathPattern=\"src/lib/google-cloud/__tests__/pdfProcessor.test.ts\" --verbose\nFAIL src/lib/google-cloud/__tests__/pdfProcessor.test.ts\n  PDF Text Extraction Accuracy Tests\n    Document AI Text Extraction\n      ✕ should extract text with high accuracy from structured PDFs (30 ms)\n      ✕ should handle multi-page PDF documents (5 ms)\n      ✕ should extract structured data with confidence scores (3 ms)\n    Vision API Text Extraction\n      ✕ should extract text from image-based PDFs using Vision API (4 ms)\n      ✓ should handle image files directly (2 ms)\n      ✓ should process JPEG images with OCR (1 ms)\n    Fallback Processing\n      ✓ should use fallback processing when cloud services fail (2 ms)\n      ✓ should provide meaningful mock data in fallback mode (7 ms)\n    Text Extraction Quality Assessment\n      ✓ should assess document quality and adjust confidence accordingly (1 ms)\n      ✕ should detect and handle OCR artifacts (2 ms)\n      ✓ should handle empty or corrupted files gracefully (1 ms)\n    Processing Time Performance\n      ✓ should complete processing within reasonable time limits (2 ms)\n      ✕ should track processing time accurately (2 ms)\n    Error Handling and Recovery\n      ✕ should handle network timeouts gracefully (3 ms)\n      ✓ should handle authentication errors (1 ms)\n      ✓ should handle quota exceeded errors (1 ms)\n    File Type Validation\n      ✓ should accept valid PDF files (1 ms)\n      ✓ should accept valid image files (2 ms)\n      ✓ should handle unsupported file types gracefully\n    Data Extraction Accuracy\n      ✓ should extract personal information accurately (1 ms)\n      ✓ should extract credit scores with bureau information (1 ms)\n      ✓ should extract account information with balances (1 ms)\n      ✓ should identify negative items correctly (1 ms)\n    Integration with Parser\n      ✓ should integrate correctly with credit report parser (1 ms)\n      ✓ should pass processing method to parser (2 ms)\n\n  ● PDF Text Extraction Accuracy Tests › Document AI Text Extraction › should extract text with high accuracy from structured PDFs\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"Mock extracted text from Document AI\"\n    Received string:    \"CREDIT REPORT ANALYSIS\n    Generated from: credit-report.pdf\n    Report Date: 7/18/2025·\n    PERSONAL INFORMATION\n    Name: Andrew Morris\n    Address: 123 Main Street, Anytown, CA 90210\n    SSN: ***-**-****\n    Date of Birth: 01/15/1985·\n    CREDIT SCORE\n    Current Score: 575\n    Bureau: Experian\n    Score Range: 300-850\n    Last Updated: 7/18/2025·\n    ACCOUNT SUMMARY\n    Total Accounts: 8\n    Open Accounts: 6\n    Closed Accounts: 2\n    Total Balance: $45,230\n    Available Credit: $12,500·\n    ACCOUNT DETAILS\n    1. Bank of America - Credit Card\n       Account Number: ****1234\n       Balance: $2,450\n       Credit Limit: $5,000\n       Payment Status: Current\n       Open Date: 03/2018·\n    2. Chase Bank - Auto Loan\n       Account Number: ****5678\n       Balance: $18,500\n       Original Amount: $25,000\n       Payment Status: Current\n       Open Date: 06/2020·\n    3. Wells Fargo - Mortgage\n       Account Number: ****9012\n       Balance: $245,000\n       Original Amount: $280,000\n       Payment Status: Current\n       Open Date: 09/2019·\n    NEGATIVE ITEMS\n    1. Late Payment - Capital One\n       Date Reported: 12/2022\n       Balance: $150\n       Status: Paid\n       Impact: Minor·\n    2. Collection Account - Medical Bill\n       Date Reported: 08/2022\n       Balance: $350\n       Status: Paid\n       Impact: Moderate·\n    CREDIT INQUIRIES\n    1. Bank of America - 03/2023\n    2. Chase Bank - 06/2020\n    3. Wells Fargo - 09/2019·\n    PUBLIC RECORDS\n    No public records found.·\n    RECOMMENDATIONS\n    1. Continue making on-time payments\n    2. Consider paying down credit card balances\n    3. Monitor credit utilization ratio\n    4. Dispute any inaccurate information·\n    This analysis was generated using fallback processing methods. For enhanced accuracy and detailed analysis, please configure Google Cloud services.\"\n\n       96 |       const result = await processor.processPDF(mockFile)\n       97 |\n    >  98 |       expect(result.text).toContain('Mock extracted text from Document AI')\n          |                           ^\n       99 |       expect(result.confidence).toBeGreaterThan(90)\n      100 |       expect(result.processingMethod).toBe('google-documentai')\n      101 |       expect(result.extractedData.personalInfo.name).toBe('John Doe')\n\n      at Object.toContain (src/lib/google-cloud/__tests__/pdfProcessor.test.ts:98:27)\n\n  ● PDF Text Extraction Accuracy Tests › Document AI Text Extraction › should handle multi-page PDF documents\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 80\n    Received:   60\n\n      112 |       expect(result.pages).toBeGreaterThan(0)\n      113 |       expect(result.text).toBeDefined()\n    > 114 |       expect(result.confidence).toBeGreaterThan(80)\n          |                                 ^\n      115 |     })\n      116 |\n      117 |     it('should extract structured data with confidence scores', async () => {\n\n      at Object.toBeGreaterThan (src/lib/google-cloud/__tests__/pdfProcessor.test.ts:114:33)\n\n  ● PDF Text Extraction Accuracy Tests › Document AI Text Extraction › should extract structured data with confidence scores\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 80\n    Received:   60\n\n      125 |       expect(result.extractedData.personalInfo.name).toBeTruthy()\n      126 |       expect(result.extractedData.creditScore.score).toBeGreaterThan(0)\n    > 127 |       expect(result.confidence).toBeGreaterThan(80)\n          |                                 ^\n      128 |     })\n      129 |   })\n      130 |\n\n      at Object.toBeGreaterThan (src/lib/google-cloud/__tests__/pdfProcessor.test.ts:127:33)\n\n  ● PDF Text Extraction Accuracy Tests › Vision API Text Extraction › should extract text from image-based PDFs using Vision API\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"google-vision\"\n    Received: \"fallback\"\n\n      143 |       const result = await processor.processPDF(mockFile)\n      144 |\n    > 145 |       expect(result.processingMethod).toBe('google-vision')\n          |                                       ^\n      146 |       expect(result.text).toContain('Mock extracted text from Vision API')\n      147 |       expect(result.confidence).toBeGreaterThan(70)\n      148 |     })\n\n      at Object.toBe (src/lib/google-cloud/__tests__/pdfProcessor.test.ts:145:39)\n\n  ● PDF Text Extraction Accuracy Tests › Text Extraction Quality Assessment › should detect and handle OCR artifacts\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"0CR\"\n    Received string:    \"CREDIT REPORT ANALYSIS\n    Generated from: poor-quality.pdf\n    Report Date: 7/18/2025·\n    PERSONAL INFORMATION\n    Name: Andrew Morris\n    Address: 123 Main Street, Anytown, CA 90210\n    SSN: ***-**-****\n    Date of Birth: 01/15/1985·\n    CREDIT SCORE\n    Current Score: 586\n    Bureau: Experian\n    Score Range: 300-850\n    Last Updated: 7/18/2025·\n    ACCOUNT SUMMARY\n    Total Accounts: 8\n    Open Accounts: 6\n    Closed Accounts: 2\n    Total Balance: $45,230\n    Available Credit: $12,500·\n    ACCOUNT DETAILS\n    1. Bank of America - Credit Card\n       Account Number: ****1234\n       Balance: $2,450\n       Credit Limit: $5,000\n       Payment Status: Current\n       Open Date: 03/2018·\n    2. Chase Bank - Auto Loan\n       Account Number: ****5678\n       Balance: $18,500\n       Original Amount: $25,000\n       Payment Status: Current\n       Open Date: 06/2020·\n    3. Wells Fargo - Mortgage\n       Account Number: ****9012\n       Balance: $245,000\n       Original Amount: $280,000\n       Payment Status: Current\n       Open Date: 09/2019·\n    NEGATIVE ITEMS\n    1. Late Payment - Capital One\n       Date Reported: 12/2022\n       Balance: $150\n       Status: Paid\n       Impact: Minor·\n    2. Collection Account - Medical Bill\n       Date Reported: 08/2022\n       Balance: $350\n       Status: Paid\n       Impact: Moderate·\n    CREDIT INQUIRIES\n    1. Bank of America - 03/2023\n    2. Chase Bank - 06/2020\n    3. Wells Fargo - 09/2019·\n    PUBLIC RECORDS\n    No public records found.·\n    RECOMMENDATIONS\n    1. Continue making on-time payments\n    2. Consider paying down credit card balances\n    3. Monitor credit utilization ratio\n    4. Dispute any inaccurate information·\n    This analysis was generated using fallback processing methods. For enhanced accuracy and detailed analysis, please configure Google Cloud services.\"\n\n      247 |       const result = await processor.processPDF(mockFile)\n      248 |\n    > 249 |       expect(result.text).toContain('0CR')\n          |                           ^\n      250 |       expect(result.confidence).toBeLessThan(90) // Lower confidence for poor quality\n      251 |     })\n      252 |\n\n      at Object.toContain (src/lib/google-cloud/__tests__/pdfProcessor.test.ts:249:27)\n\n  ● PDF Text Extraction Accuracy Tests › Processing Time Performance › should track processing time accurately\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 0\n    Received:   0\n\n      285 |       const result = await processor.processPDF(mockFile)\n      286 |\n    > 287 |       expect(result.processingTime).toBeGreaterThan(0)\n          |                                     ^\n      288 |       expect(typeof result.processingTime).toBe('number')\n      289 |     })\n      290 |   })\n\n      at Object.toBeGreaterThan (src/lib/google-cloud/__tests__/pdfProcessor.test.ts:287:37)\n\n  ● PDF Text Extraction Accuracy Tests › Error Handling and Recovery › should handle network timeouts gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"google-vision\"\n    Received: \"fallback\"\n\n      308 |\n      309 |       expect(result).toBeDefined()\n    > 310 |       expect(result.processingMethod).toBe('google-vision') // Should fallback\n          |                                       ^\n      311 |     })\n      312 |\n      313 |     it('should handle authentication errors', async () => {\n\n      at Object.toBe (src/lib/google-cloud/__tests__/pdfProcessor.test.ts:310:39)\n\nTest Suites: 1 failed, 1 total\nTests:       7 failed, 18 passed, 25 total\nSnapshots:   0 total\nTime:        0.83 s, estimated 1 s\nRan all test suites matching /src\\/lib\\/google-cloud\\/__tests__\\/pdfProcessor.test.ts/i.\n",
        "exitCode": 1
      },
      {
        "name": "Unit Tests - Credit Data Validation",
        "duration": 1988,
        "error": "Command failed: npm run test -- --testPathPattern=\"src/lib/ai/__tests__/creditDataValidation.test.ts\" --verbose\nFAIL src/lib/ai/__tests__/creditDataValidation.test.ts\n  Credit Data Parsing Validation Tests\n    Personal Information Validation\n      ✕ should accurately extract and validate personal information (8 ms)\n      ✕ should handle variations in personal information formatting (8 ms)\n      ✕ should validate personal information consistency (3 ms)\n    Credit Score Validation\n      ✕ should extract credit scores from multiple bureaus accurately (5 ms)\n      ✓ should validate credit score ranges and reasonableness (6 ms)\n      ✓ should extract score factors and reasons (1 ms)\n    Account Information Validation\n      ✕ should extract complete account information accurately (9 ms)\n      ✕ should validate account data consistency (2 ms)\n      ✕ should extract payment history accurately (1 ms)\n    Negative Items Validation\n      ✕ should identify and categorize negative items correctly (1 ms)\n      ✓ should calculate impact scores for negative items (1 ms)\n      ✕ should generate appropriate dispute reasons\n    Credit Inquiries Validation\n      ✕ should classify inquiries as hard or soft correctly (2 ms)\n      ✓ should validate inquiry dates and recency (1 ms)\n    Data Consistency Validation\n      ✓ should validate cross-references between sections\n      ✓ should validate date consistency across sections (1 ms)\n    Edge Cases and Error Handling\n      ✓ should handle incomplete or missing data gracefully (1 ms)\n      ✓ should handle malformed data without crashing\n      ✕ should handle very large credit reports efficiently (1 ms)\n      ✓ should handle empty or whitespace-only input (1 ms)\n    Confidence Scoring Validation\n      ✕ should assign appropriate confidence scores based on data quality (1 ms)\n      ✓ should assign lower confidence to poor quality data\n\n  ● Credit Data Parsing Validation Tests › Personal Information Validation › should accurately extract and validate personal information\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"***-**-1234\"\n    Received: undefined\n\n      34 |       expect(result.personalInfo.address).toContain('123 Main Street')\n      35 |       expect(result.personalInfo.address).toContain('Anytown, CA 90210')\n    > 36 |       expect(result.personalInfo.ssn).toBe('***-**-1234')\n         |                                       ^\n      37 |       expect(result.personalInfo.dateOfBirth).toBe('1985-01-15')\n      38 |       expect(result.personalInfo.phone).toBe('(555) 123-4567')\n      39 |       expect(result.personalInfo.confidence).toBeGreaterThan(85)\n\n      at Object.toBe (src/lib/ai/__tests__/creditDataValidation.test.ts:36:39)\n\n  ● Credit Data Parsing Validation Tests › Personal Information Validation › should handle variations in personal information formatting\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"789 PINE ST NEWTOWN TX 75001\"\n    Received: \"789 PINE ST, NEWTOWN TX 75001\"\n\n      60 |         \n      61 |         expect(result.personalInfo.name).toBe(variation.expectedName)\n    > 62 |         expect(result.personalInfo.address).toBe(variation.expectedAddress)\n         |                                             ^\n      63 |         expect(result.personalInfo.dateOfBirth).toBe(variation.expectedDOB)\n      64 |         expect(result.personalInfo.confidence).toBeGreaterThan(70)\n      65 |       }\n\n      at Object.toBe (src/lib/ai/__tests__/creditDataValidation.test.ts:62:45)\n\n  ● Credit Data Parsing Validation Tests › Personal Information Validation › should validate personal information consistency\n\n    TypeError: validator.validateCreditReportData is not a function\n\n      75 |\n      76 |       const result = await parser.parseCreditReport(creditReportText, 'test')\n    > 77 |       const validationResult = await validator.validateCreditReportData(result as any)\n         |                                                ^\n      78 |\n      79 |       expect(validationResult.personalInfoValidation.nameValidated).toBe(true)\n      80 |       expect(validationResult.personalInfoValidation.addressValidated).toBe(true)\n\n      at Object.validateCreditReportData (src/lib/ai/__tests__/creditDataValidation.test.ts:77:48)\n\n  ● Credit Data Parsing Validation Tests › Credit Score Validation › should extract credit scores from multiple bureaus accurately\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"2024-01-15\"\n    Received: \"2025-07-19\"\n\n      110 |       expect(result.creditScores.experian).toBeDefined()\n      111 |       expect(result.creditScores.experian.score).toBe(720)\n    > 112 |       expect(result.creditScores.experian.date).toBe('2024-01-15')\n          |                                                 ^\n      113 |       expect(result.creditScores.experian.confidence).toBeGreaterThan(85)\n      114 |       \n      115 |       expect(result.creditScores.equifax).toBeDefined()\n\n      at Object.toBe (src/lib/ai/__tests__/creditDataValidation.test.ts:112:49)\n\n  ● Credit Data Parsing Validation Tests › Account Information Validation › should extract complete account information accurately\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 2450\n    Received: 2\n\n      208 |       expect(creditCard.creditorName).toBe('Bank of America')\n      209 |       expect(creditCard.accountType).toBe('credit_card')\n    > 210 |       expect(creditCard.balance).toBe(2450)\n          |                                  ^\n      211 |       expect(creditCard.creditLimit).toBe(5000)\n      212 |       expect(creditCard.status).toBe('open')\n      213 |       expect(creditCard.openDate).toBe('2018-03-15')\n\n      at Object.toBe (src/lib/ai/__tests__/creditDataValidation.test.ts:210:34)\n\n  ● Credit Data Parsing Validation Tests › Account Information Validation › should validate account data consistency\n\n    expect(received).toHaveLength(expected)\n\n    Expected length: 1\n    Received length: 0\n    Received array:  []\n\n      240 |       const result = await parser.parseCreditReport(creditReportText, 'test')\n      241 |       \n    > 242 |       expect(result.accounts).toHaveLength(1)\n          |                               ^\n      243 |       const account = result.accounts[0]\n      244 |       \n      245 |       // Validate credit utilization is reasonable\n\n      at Object.toHaveLength (src/lib/ai/__tests__/creditDataValidation.test.ts:242:31)\n\n  ● Credit Data Parsing Validation Tests › Account Information Validation › should extract payment history accurately\n\n    expect(received).toHaveLength(expected)\n\n    Expected length: 1\n    Received length: 0\n    Received array:  []\n\n      268 |       const result = await parser.parseCreditReport(creditReportText, 'test')\n      269 |       \n    > 270 |       expect(result.accounts).toHaveLength(1)\n          |                               ^\n      271 |       const account = result.accounts[0]\n      272 |       expect(account.paymentHistory).toBeDefined()\n      273 |       expect(account.paymentHistory.length).toBeGreaterThan(0)\n\n      at Object.toHaveLength (src/lib/ai/__tests__/creditDataValidation.test.ts:270:31)\n\n  ● Credit Data Parsing Validation Tests › Negative Items Validation › should identify and categorize negative items correctly\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"Capital One\"\n    Received string:    \"Unknown Creditor\"\n\n      317 |       expect(latePayments.length).toBeGreaterThan(0)\n      318 |       const latePayment = latePayments[0]\n    > 319 |       expect(latePayment.creditorName).toContain('Capital One')\n          |                                        ^\n      320 |       expect(latePayment.amount).toBe(150)\n      321 |       expect(latePayment.date).toBe('2022-12-15')\n      322 |       expect(latePayment.impactScore).toBeGreaterThan(0)\n\n      at Object.toContain (src/lib/ai/__tests__/creditDataValidation.test.ts:319:40)\n\n  ● Credit Data Parsing Validation Tests › Negative Items Validation › should generate appropriate dispute reasons\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 0\n    Received:   0\n\n      373 |       \n      374 |       const collections = result.negativeItems.filter(item => item.type === 'collection')\n    > 375 |       expect(collections.length).toBeGreaterThan(0)\n          |                                  ^\n      376 |       \n      377 |       const collection = collections[0]\n      378 |       expect(collection.disputeReasons).toBeDefined()\n\n      at Object.toBeGreaterThan (src/lib/ai/__tests__/creditDataValidation.test.ts:375:34)\n\n  ● Credit Data Parsing Validation Tests › Credit Inquiries Validation › should classify inquiries as hard or soft correctly\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 0\n    Received:   0\n\n      400 |       // Hard inquiries\n      401 |       const hardInquiries = result.inquiries.filter(inq => inq.type === 'hard')\n    > 402 |       expect(hardInquiries.length).toBeGreaterThan(0)\n          |                                    ^\n      403 |       \n      404 |       const bankInquiry = result.inquiries.find(inq => inq.creditorName === 'Bank of America')\n      405 |       expect(bankInquiry).toBeDefined()\n\n      at Object.toBeGreaterThan (src/lib/ai/__tests__/creditDataValidation.test.ts:402:36)\n\n  ● Credit Data Parsing Validation Tests › Edge Cases and Error Handling › should handle very large credit reports efficiently\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 0\n    Received:   0\n\n      549 |       expect(result).toBeDefined()\n      550 |       expect(processingTime).toBeLessThan(10000) // 10 seconds max\n    > 551 |       expect(result.accounts.length).toBeGreaterThan(0)\n          |                                      ^\n      552 |       expect(result.negativeItems.length).toBeGreaterThan(0)\n      553 |     })\n      554 |\n\n      at Object.toBeGreaterThan (src/lib/ai/__tests__/creditDataValidation.test.ts:551:38)\n\n  ● Credit Data Parsing Validation Tests › Confidence Scoring Validation › should assign appropriate confidence scores based on data quality\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 80\n    Received:   66\n\n      589 |       const result = await parser.parseCreditReport(highQualityText, 'test')\n      590 |       \n    > 591 |       expect(result.extractionMetadata.confidence).toBeGreaterThan(80)\n          |                                                    ^\n      592 |       expect(result.personalInfo.confidence).toBeGreaterThan(85)\n      593 |       expect(Object.values(result.creditScores)[0]?.confidence).toBeGreaterThan(85)\n      594 |       expect(result.accounts[0]?.confidence).toBeGreaterThan(80)\n\n      at Object.toBeGreaterThan (src/lib/ai/__tests__/creditDataValidation.test.ts:591:52)\n\nTest Suites: 1 failed, 1 total\nTests:       12 failed, 10 passed, 22 total\nSnapshots:   0 total\nTime:        0.676 s\nRan all test suites matching /src\\/lib\\/ai\\/__tests__\\/creditDataValidation.test.ts/i.\n",
        "exitCode": 1
      },
      {
        "name": "Integration Tests - End-to-End Pipeline",
        "duration": 1838,
        "error": "Command failed: npm run test -- --testPathPattern=\"src/__tests__/integration/pdf-processing-pipeline.test.ts\" --verbose\nFAIL src/__tests__/integration/pdf-processing-pipeline.test.ts\n  ● Test suite failed to run\n\n    ReferenceError: Request is not defined\n\n      246 |       const response = await POST(mockRequest)\n      247 |       const data = await response.json()\n    > 248 |\n          | ^\n      249 |       expect(response.status).toBe(200)\n      250 |       expect(data.success).toBe(true)\n      251 |       expect(data.extractedText).toBeDefined()\n\n      at Object.Request (node_modules/next/src/server/web/spec-extension/request.ts:10:34)\n      at Object.<anonymous> (node_modules/next/server.js:2:16)\n      at Object.<anonymous> (src/__tests__/integration/pdf-processing-pipeline.test.ts:248:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.57 s\nRan all test suites matching /src\\/__tests__\\/integration\\/pdf-processing-pipeline.test.ts/i.\n",
        "exitCode": 1
      },
      {
        "name": "Integration Tests - Service Failure Handling",
        "duration": 2383,
        "error": "Command failed: npm run test -- --testPathPattern=\"src/__tests__/integration/service-failure-handling.test.ts\" --verbose\nFAIL src/__tests__/integration/service-failure-handling.test.ts\n  ● Test suite failed to run\n\n    ReferenceError: Request is not defined\n\n       7 | import { NextRequest } from 'next/server'\n       8 |\n    >  9 | // Mock various service failure scenarios\n         |                 ^\n      10 | const mockServiceFailures = {\n      11 |   documentAI: {\n      12 |     timeout: () => new Promise((_, reject) => \n\n      at Object.Request (node_modules/next/src/server/web/spec-extension/request.ts:10:34)\n      at Object.<anonymous> (node_modules/next/server.js:2:16)\n      at Object.<anonymous> (src/__tests__/integration/service-failure-handling.test.ts:9:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        1.089 s\nRan all test suites matching /src\\/__tests__\\/integration\\/service-failure-handling.test.ts/i.\n",
        "exitCode": 1
      },
      {
        "name": "Performance Tests - Large PDF Processing",
        "duration": 10286,
        "error": "Command failed: npm run test -- --testPathPattern=\"src/__tests__/performance/pdf-processing-performance.test.ts\" --verbose\nFAIL src/__tests__/performance/pdf-processing-performance.test.ts (8.657 s)\n  PDF Processing Performance Tests\n    Single Document Performance\n      ✓ should process small PDF (1-2 pages) within 5 seconds (278 ms)\n      ✓ should process medium PDF (5-10 pages) within 15 seconds (202 ms)\n      ✓ should process large PDF (20+ pages) within 45 seconds (166 ms)\n      ✕ should maintain accuracy with increasing document size (747 ms)\n    Concurrent Processing Performance\n      ✓ should handle 3 concurrent small PDF processing within 10 seconds (311 ms)\n      ✓ should handle 5 concurrent medium PDF processing within 30 seconds (298 ms)\n      ✓ should maintain performance under mixed concurrent load (347 ms)\n    Memory Usage Performance\n      ✓ should not cause memory leaks with repeated processing (2096 ms)\n      ✓ should handle large documents without excessive memory usage (335 ms)\n    Processing Method Performance Comparison\n      ✕ should compare Document AI vs Vision API performance (614 ms)\n      ✓ should measure fallback processing performance (215 ms)\n    Scalability Testing\n      ✕ should scale processing time linearly with document complexity (801 ms)\n      ✓ should handle increasing concurrent load gracefully (975 ms)\n    Error Recovery Performance\n      ✕ should recover quickly from service failures (377 ms)\n      ✓ should handle timeout scenarios efficiently (172 ms)\n    Resource Utilization\n      ✕ should efficiently utilize CPU during processing (362 ms)\n\n  ● PDF Processing Performance Tests › Single Document Performance › should maintain accuracy with increasing document size\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 60\n    Received:   60\n\n      214 |       // All results should maintain reasonable confidence\n      215 |       results.forEach((result, index) => {\n    > 216 |         expect(result.confidence).toBeGreaterThan(60)\n          |                                   ^\n      217 |         expect(result.extractedData.personalInfo.name).toBeTruthy()\n      218 |         \n      219 |         // Complex documents should have more data\n\n      at toBeGreaterThan (src/__tests__/performance/pdf-processing-performance.test.ts:216:35)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (src/__tests__/performance/pdf-processing-performance.test.ts:215:15)\n\n  ● PDF Processing Performance Tests › Processing Method Performance Comparison › should compare Document AI vs Vision API performance\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"google-documentai\"\n    Received: \"fallback\"\n\n      369 |       const visionTime = Date.now() - visionStart\n      370 |\n    > 371 |       expect(docAIResult.processingMethod).toBe('google-documentai')\n          |                                            ^\n      372 |       expect(visionResult.processingMethod).toBe('google-vision')\n      373 |       \n      374 |       // Both should complete within reasonable time\n\n      at Object.toBe (src/__tests__/performance/pdf-processing-performance.test.ts:371:44)\n\n  ● PDF Processing Performance Tests › Scalability Testing › should scale processing time linearly with document complexity\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 326\n    Received:   238\n\n      427 |       \n      428 |       // Processing time should increase with complexity but not exponentially\n    > 429 |       expect(times[1]).toBeGreaterThan(times[0]) // medium > simple\n          |                        ^\n      430 |       expect(times[2]).toBeGreaterThan(times[1]) // complex > medium\n      431 |       \n      432 |       // But not more than 5x increase for each step\n\n      at Object.toBeGreaterThan (src/__tests__/performance/pdf-processing-performance.test.ts:429:24)\n\n  ● PDF Processing Performance Tests › Error Recovery Performance › should recover quickly from service failures\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 0\n    Received:   0\n\n      503 |       const fallbackResults = results.filter(r => r.processingMethod !== 'google-documentai')\n      504 |       \n    > 505 |       expect(docAIResults.length).toBeGreaterThan(0)\n          |                                   ^\n      506 |       expect(fallbackResults.length).toBeGreaterThan(0)\n      507 |       expect(totalTime).toBeLessThan(30000) // Should complete within 30 seconds\n      508 |     }, 35000)\n\n      at Object.toBeGreaterThan (src/__tests__/performance/pdf-processing-performance.test.ts:505:35)\n\n  ● PDF Processing Performance Tests › Resource Utilization › should efficiently utilize CPU during processing\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 0\n    Received:   0\n\n      550 |       results.forEach(result => {\n      551 |         expect(result).toBeDefined()\n    > 552 |         expect(result.processingTime).toBeGreaterThan(0)\n          |                                       ^\n      553 |       })\n      554 |       \n      555 |       // Concurrent processing should be more efficient than sequential\n\n      at toBeGreaterThan (src/__tests__/performance/pdf-processing-performance.test.ts:552:39)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (src/__tests__/performance/pdf-processing-performance.test.ts:550:15)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 11 passed, 16 total\nSnapshots:   0 total\nTime:        8.938 s\nRan all test suites matching /src\\/__tests__\\/performance\\/pdf-processing-performance.test.ts/i.\n",
        "exitCode": 1
      },
      {
        "name": "Security Tests - PII Protection",
        "duration": 1821,
        "error": "Command failed: npm run test -- --testPathPattern=\"src/__tests__/security/pii-protection.test.ts\" --verbose\nFAIL src/__tests__/security/pii-protection.test.ts\n  ● Test suite failed to run\n\n    ReferenceError: Request is not defined\n\n      46 |\n      47 |   describe('PII Detection and Masking', () => {\n    > 48 |     it('should detect and mask Social Security Numbers', () => {\n         |                 ^\n      49 |       const testTexts = [\n      50 |         'SSN: 123-45-6789',\n      51 |         'Social Security Number: 987-65-4321',\n\n      at Object.Request (node_modules/next/src/server/web/spec-extension/request.ts:10:34)\n      at Object.<anonymous> (node_modules/next/server.js:2:16)\n      at Object.<anonymous> (src/__tests__/security/pii-protection.test.ts:48:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.572 s\nRan all test suites matching /src\\/__tests__\\/security\\/pii-protection.test.ts/i.\n",
        "exitCode": 1
      }
    ],
    "skipped": []
  }
}