# Security-focused CI/CD Pipeline for CreditAI
# Comprehensive security scanning and compliance checks
name: Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Dependency Security Scan
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.4'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Container Security Scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t creditai:security-test .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'creditai:security-test'
          format: 'sarif'
          output: 'trivy-container.sarif'

      - name: Upload Trivy container results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container.sarif'

      - name: Run Anchore container scan
        uses: anchore/scan-action@v3
        with:
          image: 'creditai:security-test'
          fail-build: false
          severity-cutoff: medium

  # SAST (Static Application Security Testing)
  sast:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure as Code Security
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,github_actions
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif

  # License Compliance
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.4'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: npx license-checker --onlyAllow 'MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;0BSD'

  # OWASP ZAP Dynamic Security Testing
  dast:
    name: Dynamic Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://staging.creditai.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Security Policy Validation
  policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Open Policy Agent
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.58.0/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin

      - name: Validate security policies
        run: |
          opa test security/policies/
          opa fmt --diff security/policies/

  # Compliance Reporting
  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, sast, secret-scan, iac-scan, license-check]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate compliance report
        run: |
          mkdir -p reports
          echo "# Security Compliance Report" > reports/security-report.md
          echo "Generated on: $(date)" >> reports/security-report.md
          echo "" >> reports/security-report.md
          echo "## Scan Results" >> reports/security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> reports/security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> reports/security-report.md
          echo "- SAST: ${{ needs.sast.result }}" >> reports/security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> reports/security-report.md
          echo "- IaC Scan: ${{ needs.iac-scan.result }}" >> reports/security-report.md
          echo "- License Check: ${{ needs.license-check.result }}" >> reports/security-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: reports/security-report.md

      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_SECURITY }}
          text: 'Security pipeline failed. Please review the results.'